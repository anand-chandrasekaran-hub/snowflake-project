name: Snowflake Migration

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install snowflake-connector-python cryptography

    - name: Run Snowflake migration script
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
        SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}
      run: |
        python -c "
import snowflake.connector
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

# Load the private key from GitHub Secrets
private_key = serialization.load_pem_private_key(
    bytes('${{ secrets.SNOWFLAKE_PRIVATE_KEY }}', 'utf-8'),
    password=bytes('${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}', 'utf-8'),
    backend=default_backend()
)

# Establish the Snowflake connection
conn = snowflake.connector.connect(
    user='${{ secrets.SNOWFLAKE_USER }}',
    account='${{ secrets.SNOWFLAKE_ACCOUNT }}',
    private_key=private_key
)

# SQL query to create or replace the table
sql_query = '''
CREATE OR REPLACE TABLE NECDEV.DEV_STAGING.order_details (
    order_detail_id INT AUTOINCREMENT,
    order_id INT,
    product_id INT,
    quantity INT,
    PRIMARY KEY (order_detail_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
'''

# Execute the query
try:
    cursor = conn.cursor()
    cursor.execute(sql_query)
    print('Table created or replaced successfully.')
finally:
    cursor.close()
    conn.close()
"
